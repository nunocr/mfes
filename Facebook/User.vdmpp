class User

	types
		public String = seq of char;
		public Date::day : nat
								 month : nat
								 year : nat;
		public Sex = <Male> | <Female> | <Other>;

	values
	-- TODO Define values here

	instance variables
		public name: String;
		public sex: Sex;
		public birthDate: Date;
		public friendsList: set of User := {};
		
		public feed: seq of Post := [];
		
		public static userId : int := 0;
		public id : int := userId;

	operations
	-- User Constructor
		public User: String ==> User
		User(userName) == (
			name := userName;
			friendsList := {};
			
			id := userId;
			userId := userId + 1;
			return self
		);
		
		-- User Constructor
		public User: String * nat * nat * nat ==> User
		User(userName, userDay, userMonth, userYear) == (
			name := userName;
			birthDate.day := userDay;
			birthDate.month := userMonth;
			birthDate.year := userYear;
			friendsList  := {};
			
			id := userId;
			userId := userId + 1;
			return self
		);
		
			-- User Constructor
		public User: String * Sex ==> User
		User(userName, userSex) == (
			name := userName;
			sex := userSex;
			friendsList := {};
			
			id := userId;
			userId := userId + 1;
			return self
		);
		
				-- User Constructor
		public User: String * nat * nat * nat * Sex ==> User
		User(userName, userDay, userMonth, userYear, userSex) == (
			name := userName;
			birthDate.day := userDay;
			birthDate.month := userMonth;
			birthDate.year := userYear;
			sex := userSex;
			friendsList := {};
			
			id := userId;
			userId := userId + 1;
			return self
		);
		

	
	-- get's
		
		
	-- Returns user name
	public pure getName : () ==> String
	getName() == return name;
	
	-- Returns user sex
	public pure getSex : () ==> Sex
	getSex() == return sex;
	
	-- Returns user birth date
	public pure getBirthDate : () ==> Date
	getBirthDate() == return birthDate;
	
	-- Returns list of friends of the User
	public pure getFriendsList : () ==> set of User
	getFriendsList() == return friendsList;
	
	-- Returns id of the User
	public pure getUserId : () ==> nat
	getUserId() == return id;
	
	-- Returns feed of posts of the user
	public pure getFeed : () ==> seq of Post
	getFeed() == return feed;
	
	
	
	-- Set User Name
	public SetName : String ==> ()
	SetName(newName) == name := newName;
	
	-- Adds a Friend to the friends list of the User
	
	public addFriend: User ==> ()
	addFriend(friend) == friendsList := friendsList union {friend}
	pre friend <> self and friend not in set friendsList
	post friendsList = friendsList~ union {friend};
	
	
	
	
	
	
	/*
	public AddFriend : User ==> ()
	AddFriend(friend) == friendsList := friendsList union {friend}
	pre friend <> self and friend not in set friendsList
	post friendsList = friendsList~ union {friend};
	*/
	
	-- Removes a Friend from the friends list of the User
	public RemoveFriend : User ==> ()
	RemoveFriend(friend) ==
	friendsList := friendsList \ {friend}
	pre friend in set friendsList
	post friendsList = friendsList~ \ {friend};
	
	
	-- Creates a Post and adds it to the posts list of the User
	public MakePost : String * Date * set of User ==> ()
	MakePost(postText, postDate, postViewers) == (
	feed := feed ^ [new Post(postText, self, postDate.day, postDate.month, postDate.year, postViewers)];  
	);
	
	-- Adds post to feed of user
	public addPost : Post ==> ()
	addPost(newPost) == 
	feed := feed ^ [newPost];
	


	
	

	functions
	-- TODO Define functiones here

	traces
	-- TODO Define Combinatorial Test Traces here

end User
